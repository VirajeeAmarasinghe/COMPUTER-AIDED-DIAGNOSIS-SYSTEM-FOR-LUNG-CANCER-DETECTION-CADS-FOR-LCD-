/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cad;

import ij.plugin.DICOM;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import org.opencv.core.Mat;
import org.opencv.core.MatOfPoint;
import org.opencv.highgui.Highgui;

/**
 *
 * @author virajee
 */
public class XRayImageUploadForm extends javax.swing.JFrame {

    public static String dicom_image_path = "";
    String bitMap2048x2048Path = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\ConvertedBitMapXRay2048x2048.bmp";
    String bitMap512x512Path = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\ResizedBitMapXRay512x512.bmp";
    String grayScaleImagePath = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\GrayScaleXRay.bmp";
    String histoPath = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\ContrastLimitedAdaptiveHistogramEqualized.bmp";
    String medianFilterPath = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\MedianFilter.bmp";
    String finalWatershed = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\FinalWatershed8U.bmp";
    String initialLungMaskPath = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\InitialLungMaskXRay.bmp";
    String completeLungMaskPath = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\completeLungMaskXRay.bmp";
    String lungRegionPath = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\LungRegionXRaY.bmp";
    String gaborFilterPath = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\GaborFilter.bmp";
    String gaussianBlurringPath = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\GaussianBlurring.bmp";
    String differencePath = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\Difference.bmp";
    String contourPath = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\ContourDetection.bmp";
    String detectedAbnormalityPath = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\DetectedAbnormality.bmp";
    String boundingBoxPath = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\BoundingBox.bmp";

    /**
     * Creates new form XRayImageUploadForm
     */
    public XRayImageUploadForm() {
        initComponents();
        setLocationRelativeTo(null);
        //setSize(int width,int height)
        setSize(650, 645);
        lbl_result_display.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbl_dicom = new javax.swing.JLabel();
        lbl_result_display = new javax.swing.JLabel();
        btnUploadXRay = new javax.swing.JButton();
        btn_BitMap = new javax.swing.JButton();
        btn_cancel = new javax.swing.JButton();
        lb_message = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_dicom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(lbl_dicom, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, 514, 500));

        lbl_result_display.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(lbl_result_display, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 40, 514, 500));

        btnUploadXRay.setText("Upload DICOM");
        btnUploadXRay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadXRayActionPerformed(evt);
            }
        });
        jPanel1.add(btnUploadXRay, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 560, 130, -1));

        btn_BitMap.setText("Upload BitMap");
        btn_BitMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BitMapActionPerformed(evt);
            }
        });
        jPanel1.add(btn_BitMap, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 560, 130, -1));

        btn_cancel.setText("Cancel");
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });
        jPanel1.add(btn_cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 560, 130, -1));
        jPanel1.add(lb_message, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 560, 230, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1253, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadXRayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadXRayActionPerformed
        String text = "";
        lbl_result_display.setText("");
        lbl_result_display.setVisible(true);
        setSize(1280, 645);
        text = lbl_result_display.getText() + "<html><p style='margin-left:10px;margin-top:10px;'>Opening X-ray Image in DICOM Format....</p>";
        lbl_result_display.setText(text);
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.showOpenDialog(this);
        File f = fc.getSelectedFile();
        if (f != null) {
            dicom_image_path = f.getAbsolutePath();
            DICOM dcm = new DICOM();
            dcm.open(dicom_image_path);
            if (dcm.getWidth() == 0) {
                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Error opening image.dicom....</p>";
                lbl_result_display.setText(text);
            } else {
                ImageIcon imageIcon = new ImageIcon(dcm.getImage());
                lbl_dicom.setIcon(imageIcon);

                File bitMap2048x2048File = new File(bitMap2048x2048Path);
                try {
                    File ff = new File(dicom_image_path);

                    OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(bitMap2048x2048File));
                    ImageIO.write((RenderedImage) dcm.getImage(), "bmp", outputStream);
                    outputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }

                //resizing image 512x512
                String inputImagePath = bitMap2048x2048Path;
                String outputImagePath1 = bitMap512x512Path;

                // resize to a fixed width (not proportional)
                int scaledWidth = 512;
                int scaledHeight = 512;
                ResizeImage.resizeWithImageJ(inputImagePath, outputImagePath1, scaledWidth, scaledHeight);

                File bitMap512x512File = new File(bitMap512x512Path);
                BufferedImage bb;
                try {
                    bb = ImageIO.read(bitMap512x512File);
                    lbl_dicom.setIcon(new ImageIcon(bb));
                } catch (IOException e) {
                }

                //convert bitmap to gray scale          
                ConvertRGBImageToGrayScale c = new ConvertRGBImageToGrayScale();

                BufferedImage img = c.readImage(bitMap512x512File);
                if (img != null) {
                    BufferedImage image = c.convertToGrayscale(img);
                    File grayScaleFile = new File(grayScaleImagePath);
                    c.writeImage(image, grayScaleFile);

                    //Contrast Limited Adaptive Histogram Equalization (Adaptive Histogram Equalization)                
                    HistogramsEqualization h = new HistogramsEqualization();
                    h.equalizeHisto(grayScaleImagePath, histoPath);

                    //median filter
                    MedianFilter medianFilter = new MedianFilter();
                    medianFilter.medianFiltering(histoPath, medianFilterPath);

                    //watershed algorithm
                    Watershed w = new Watershed();
                    w.implementWatershed(medianFilterPath, finalWatershed);

                    //extracting lung region
                    ExtractingLungRegionFromXRay ex = new ExtractingLungRegionFromXRay();
                    ex.getLungRegion(finalWatershed, initialLungMaskPath, medianFilterPath, completeLungMaskPath, lungRegionPath);

                    //gabor filter
                    GaborFiltering g = new GaborFiltering();
                    g.applyGaborFilter(lungRegionPath, gaborFilterPath);

                    //GaussianBlurring
                    GuassinBlur gu = new GuassinBlur();
                    gu.applyGuassinBlur(gaborFilterPath, gaussianBlurringPath);

                    //subtraction
                    Subtraction s = new Subtraction();
                    s.subtractGaborFromGuassian(gaborFilterPath, gaussianBlurringPath, differencePath);

                    //contour detection
                    ContourDetectionXRay contour = new ContourDetectionXRay();
                    List<MatOfPoint> contours = contour.detectContours(differencePath, contourPath);

                    //calculate average intensity
                    Mat lungRegion = Highgui.imread(lungRegionPath);
                    AverageIntensity a = new AverageIntensity();
                    double[] avgIntensities = a.calculateAverageIntensity(contours, lungRegion);

                    //calculate Ratio of Object Pixels to its Bounding Box
                    DrawingBoundingBox db = new DrawingBoundingBox();
                    double[] boundingBoxRatio = db.calculateRatioOfObjectsPixelsToItsBoundingBox(contours, lungRegion, boundingBoxPath);

                    //detect the abnormality
                    DetectAbnormality d = new DetectAbnormality();
                    d.detectAbnormality(contours, avgIntensities, boundingBoxRatio, bitMap512x512Path, detectedAbnormalityPath);

                    File abnormalFile = new File(detectedAbnormalityPath);
                    try {
                        BufferedImage bufferAbnormal = ImageIO.read(abnormalFile);
                        lbl_result_display.setIcon(new ImageIcon(bufferAbnormal));
                        lb_message.setText("Abnormal Area is Shown in Blue Color");
                    } catch (IOException ex1) {

                    }
                    contours = new ArrayList<>();
                    avgIntensities = null;
                    boundingBoxRatio = null;

                }
            }
        } else {
            text = lbl_result_display.getText() + "<html><p style='margin-left:10px;margin-top:10px;'>Please Select the X-ray Image....</p>";
            lbl_result_display.setText(text);
        }

    }//GEN-LAST:event_btnUploadXRayActionPerformed

    private void btn_BitMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BitMapActionPerformed
        String text = "";
        lbl_result_display.setText("");
        lbl_result_display.setVisible(true);
        setSize(1280, 645);
        text = lbl_result_display.getText() + "<html><p style='margin-left:10px;margin-top:10px;'>Opening X-ray Image in DICOM Format....</p>";
        lbl_result_display.setText(text);
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.showOpenDialog(this);
        File selectedFile = fc.getSelectedFile();
        if (selectedFile != null) {
            dicom_image_path = selectedFile.getAbsolutePath();

            File bitMap2048x2048File = new File(bitMap2048x2048Path);
            try {
                File ff = new File(dicom_image_path);
                BufferedImage b = ImageIO.read(ff);

                OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(bitMap2048x2048File));
                ImageIO.write(b, "bmp", outputStream);
                outputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }

            //resizing image 512x512
            String inputImagePath = bitMap2048x2048Path;
            String outputImagePath1 = bitMap512x512Path;

            // resize to a fixed width (not proportional)
            int scaledWidth = 512;
            int scaledHeight = 512;
            ResizeImage.resizeWithImageJ(inputImagePath, outputImagePath1, scaledWidth, scaledHeight);

            File bitMap512x512File = new File(bitMap512x512Path);
            BufferedImage bb;
            try {
                bb = ImageIO.read(bitMap512x512File);
                lbl_dicom.setIcon(new ImageIcon(bb));
            } catch (IOException e) {
            }

            //convert bitmap to gray scale          
            ConvertRGBImageToGrayScale c = new ConvertRGBImageToGrayScale();

            BufferedImage img = c.readImage(bitMap512x512File);
            if (img != null) {
                BufferedImage image = c.convertToGrayscale(img);
                File grayScaleFile = new File(grayScaleImagePath);
                c.writeImage(image, grayScaleFile);

                //Contrast Limited Adaptive Histogram Equalization (Adaptive Histogram Equalization)                
                HistogramsEqualization h = new HistogramsEqualization();
                h.equalizeHisto(grayScaleImagePath, histoPath);

                //median filter
                MedianFilter medianFilter = new MedianFilter();
                medianFilter.medianFiltering(histoPath, medianFilterPath);

                //watershed algorithm
                Watershed w = new Watershed();
                w.implementWatershed(medianFilterPath, finalWatershed);

                //extracting lung region
                ExtractingLungRegionFromXRay ex = new ExtractingLungRegionFromXRay();
                ex.getLungRegion(finalWatershed, initialLungMaskPath, medianFilterPath, completeLungMaskPath, lungRegionPath);

                //gabor filter
                GaborFiltering g = new GaborFiltering();
                g.applyGaborFilter(lungRegionPath, gaborFilterPath);

                //GaussianBlurring
                GuassinBlur gu = new GuassinBlur();
                gu.applyGuassinBlur(gaborFilterPath, gaussianBlurringPath);

                //subtraction
                Subtraction s = new Subtraction();
                s.subtractGaborFromGuassian(gaborFilterPath, gaussianBlurringPath, differencePath);

                //contour detection
                ContourDetectionXRay contour = new ContourDetectionXRay();
                List<MatOfPoint> contours = contour.detectContours(differencePath, contourPath);

                //calculate average intensity
                Mat lungRegion = Highgui.imread(lungRegionPath);
                AverageIntensity a = new AverageIntensity();
                double[] avgIntensities = a.calculateAverageIntensity(contours, lungRegion);

                //calculate Ratio of Object Pixels to its Bounding Box
                DrawingBoundingBox db = new DrawingBoundingBox();
                double[] boundingBoxRatio = db.calculateRatioOfObjectsPixelsToItsBoundingBox(contours, lungRegion, boundingBoxPath);

                //detect the abnormality
                DetectAbnormality d = new DetectAbnormality();
                d.detectAbnormality(contours, avgIntensities, boundingBoxRatio, bitMap512x512Path, detectedAbnormalityPath);

                File abnormalFile = new File(detectedAbnormalityPath);
                try {
                    BufferedImage bufferAbnormal = ImageIO.read(abnormalFile);
                    lbl_result_display.setIcon(new ImageIcon(bufferAbnormal));
                    lb_message.setText("Abnormal Area is Shown in Blue Color");
                } catch (IOException ex1) {

                }
                contours = new ArrayList<>();
                avgIntensities = null;
                boundingBoxRatio = null;

            }

        } else {
            text = lbl_result_display.getText() + "<html><p style='margin-left:10px;margin-top:10px;'>Please Select the X-ray Image....</p>";
            lbl_result_display.setText(text);
        }
    }//GEN-LAST:event_btn_BitMapActionPerformed

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        Home h = new Home();
        this.dispose();
        h.setVisible(true);
    }//GEN-LAST:event_btn_cancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(XRayImageUploadForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(XRayImageUploadForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XRayImageUploadForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XRayImageUploadForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new XRayImageUploadForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUploadXRay;
    private javax.swing.JButton btn_BitMap;
    private javax.swing.JButton btn_cancel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lb_message;
    public javax.swing.JLabel lbl_dicom;
    public static javax.swing.JLabel lbl_result_display;
    // End of variables declaration//GEN-END:variables
}
