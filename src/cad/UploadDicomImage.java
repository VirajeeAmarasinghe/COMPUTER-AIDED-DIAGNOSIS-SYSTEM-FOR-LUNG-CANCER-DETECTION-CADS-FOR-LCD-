/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cad;

import ij.plugin.DICOM;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import org.opencv.core.Mat;
import org.opencv.core.MatOfPoint;
import org.opencv.highgui.Highgui;

/**
 *
 * @author virajee
 */

/*
 links-https://blog.idrsolutions.com/2017/03/how-to-read-dicom-files-in-java/
 */
public class UploadDicomImage extends javax.swing.JFrame {
    
    public static String dicom_image_path = "";

    /**
     * Creates new form UploadDicomImage
     */
    public UploadDicomImage() {
        initComponents();
        setLocationRelativeTo(null);
        //setSize(int width,int height)
        setSize(650, 645);
        lbl_result_display.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbl_dicom = new javax.swing.JLabel();
        btn_upload = new javax.swing.JButton();
        lbl_result_display = new javax.swing.JLabel();
        lbl_legend = new javax.swing.JLabel();
        lbl_legend2 = new javax.swing.JLabel();
        btn_cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_dicom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(lbl_dicom, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, 514, 514));

        btn_upload.setText("Upload DICOM");
        btn_upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_uploadActionPerformed(evt);
            }
        });
        jPanel1.add(btn_upload, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 580, -1, -1));

        lbl_result_display.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbl_result_display.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl_result_display.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbl_result_display.setAlignmentX(1.0F);
        lbl_result_display.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(lbl_result_display, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 40, 514, 514));
        jPanel1.add(lbl_legend, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 570, 250, 20));
        jPanel1.add(lbl_legend2, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 600, 250, 20));

        btn_cancel.setText("Cancel");
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });
        jPanel1.add(btn_cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 580, 100, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1268, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_uploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_uploadActionPerformed
        String text = "";
        lbl_result_display.setText("");
        lbl_result_display.setVisible(true);
        setSize(1280, 645);
        text = lbl_result_display.getText() + "<html><p style='margin-left:10px;margin-top:10px;'>Opening CT Image in DICOM Format....</p>";
        lbl_result_display.setText(text);
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.showOpenDialog(this);
        File f = fc.getSelectedFile();
        if (f != null) {
            dicom_image_path = f.getAbsolutePath();
            DICOM dcm = new DICOM();            
            dcm.open(dicom_image_path);
            if (dcm.getWidth() == 0) {
                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Error opening image.dicom....</p>";
                lbl_result_display.setText(text);
            } else {
                ImageIcon imageIcon = new ImageIcon(dcm.getImage());
                lbl_dicom.setIcon(imageIcon);
                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>CT Image in DICOM Format is Opened....</p>";
                lbl_result_display.setText(text);

                //convert to bitmap
                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Converting DICOM to BitMap....</p>";
                lbl_result_display.setText(text);
                File file2 = new File("D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\ConvertedBitMap.bmp");
                try {
                    OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(file2));
                    ImageIO.write((RenderedImage) dcm.getImage(), "bmp", outputStream);
                    outputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                
                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Converted to BitMap....</p>";
                lbl_result_display.setText(text);

                //convert bitmap to gray scale
                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Converting BitMap to GrayScale....</p>";                
                lbl_result_display.setText(text);
                
                ConvertRGBImageToGrayScale c = new ConvertRGBImageToGrayScale();
                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Reading BitMap Image....</p>";                
                lbl_result_display.setText(text);
                
                BufferedImage img = c.readImage(file2);
                if (img != null) {
                    text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Converting.....</p>";
                    lbl_result_display.setText(text);
                    
                    BufferedImage image = c.convertToGrayscale(img);                    
                    File grayScaleFile = new File("D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\X-ray\\X-Ray Output\\GrayScale.bmp");
                    c.writeImage(image, grayScaleFile);                    
                    
                    text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Converted to Grayscale....</p>";                    
                    lbl_result_display.setText(text);

                    //thresholding image
                    text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Thresholding Image....</p>";
                    lbl_result_display.setText(text);
                    
                    int threshold = ThresholdingImage.autoThreshold(image);
                    image = ThresholdingImage.toBinary(image, threshold);
                    ThresholdingImage.save(image);                    
                    text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Thresholding Completed....</p>";
                    lbl_result_display.setText(text);

                    //********************Initial Lung Mask*********************************************
                    text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Detecting Blobs....</p>";
                    lbl_result_display.setText(text);
                    BlobDetection b = new BlobDetection();
                    b.detectingBlobs();
                    text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Extracting Blobs....</p>";
                    lbl_result_display.setText(text);
                    
                    ExtractingBlobs e = new ExtractingBlobs();
                    e.extractingBlobs();

                    //*********************Complete Lung Mask********************************************
                    text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Complete Lung Masking....</p>";
                    lbl_result_display.setText(text);
                    
                    MorphologyClosing m = new MorphologyClosing();
                    boolean result = m.morphologyClosing();
                    if (result) {
                        //*****************************Extraction of lung region (ROI-Region Of Interest)****************
                        text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Extracting Lung Region....</p>";
                        lbl_result_display.setText(text);
                        ExtractionOfLungs ex = new ExtractionOfLungs();
                        boolean result_2 = ex.extract();
                        if (result_2) {
                            //*************************Contour Detecting*************************************************
                            text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Contour Detecting....</p>";
                            lbl_result_display.setText(text);
                            ContourDetection contourD = new ContourDetection();
                            List<MatOfPoint> contours = contourD.detectContours();
                            
                            if (contours != null) {
                                //******************Calculating area of each contour*****************************************
                                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Calculating Nodule Area....</p>";
                                lbl_result_display.setText(text);
                                AreaOfEachNodule a = new AreaOfEachNodule();
                                double[] areaArray = a.calculateNoduleArea(contours);
                                ArrayList<Integer> AreaNaNIndices = a.getNaNIndices(contours);

                                //*************Calculating average intensity****************************
                                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Calculating Average Intensity....</p>";
                                lbl_result_display.setText(text);
                                AverageIntensity avgInten = new AverageIntensity();
                                Mat lungRegion = Highgui.imread("D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\LungRegion.bmp");
                                double[] avgIntensity = avgInten.calculateAverageIntensity(contours, lungRegion);
                                ArrayList<Integer> AvgIntensityNaNIndices = avgInten.getNanIndices(contours, lungRegion);

                                //**********Calculating Ratio of Object Pixels to its Bounding Box********
                                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Calculating Ratio of Object Pixels to its Bounding Box....</p>";
                                lbl_result_display.setText(text);
                                DrawingBoundingBox d = new DrawingBoundingBox();
                                String boundingPath = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\BoundngBox.bmp";
                                double[] boundingBox = d.calculateRatioOfObjectsPixelsToItsBoundingBox(contours, lungRegion, boundingPath);
                                ArrayList<Integer> boundingBoxNaNIndices = d.getNaNIndices(contours);

                                //**********Calculating Eccentricity***********************************
                                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Calculating Eccentricity....</p>";
                                lbl_result_display.setText(text);
                                Eccentricity ec = new Eccentricity();
                                double[] eccentricity = ec.getEccentricity(contours);
                                ArrayList<Integer> eccentricityNaNIndices = ec.getNaNIndices(contours);

                                //******Calculating Solidity********************************************
                                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Calculating Solidity....</p>";
                                lbl_result_display.setText(text);
                                Solidity s = new Solidity();
                                double[] solArray = s.calculateSolidity(contours, lungRegion);
                                ArrayList<Integer> solidityNaNIndices = s.getNaNIndices(contours);

                                //*****Calculating Major and Minor Axis Length**************************
                                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Calculating Major Axis Length....</p>";
                                lbl_result_display.setText(text);
                                FindMajorAndMinorAxisLength fM = new FindMajorAndMinorAxisLength();
                                double[] majorArray = fM.calculateMajorAxisLength(contours);
                                ArrayList<Integer> majorNaNIndices = fM.GetNaNIndicesMajorAxisLength(contours);
                                
                                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Calculating Minor Axis Length....</p>";
                                lbl_result_display.setText(text);
                                double[] minorArray = fM.calculateMinorAxisLength(contours);
                                ArrayList<Integer> minorNaNIndices = fM.GetNaNIndicesMinorAxisLength(contours);
                                
                                NoduleDetection_2 n = new NoduleDetection_2();
                                n.detectNodule(areaArray, AreaNaNIndices, avgIntensity, AvgIntensityNaNIndices, boundingBox, boundingBoxNaNIndices, eccentricity, eccentricityNaNIndices, solArray, solidityNaNIndices, majorArray, majorNaNIndices, minorArray, minorNaNIndices, contours);
                                lbl_result_display.setText("");
                                String path = "D:\\Degree Subject Materials\\Final Project\\DICOM Samples\\LungNodules.bmp";                                
                                File ff = new File(path);
                                BufferedImage buf;
                                try {
                                    buf = ImageIO.read(ff);
                                    lbl_result_display.setIcon(new ImageIcon(buf));
                                } catch (IOException ex1) {                                    
                                }
                                String text2 = "Benign Nodules are Shown in Blue Color.";
                                String text3 = "Malignant Nodules are Shown in Red Color";
                                lbl_legend.setText(text2);
                                lbl_legend2.setText(text3);
                            } else {
                                text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Error Occurred Detecting Contours....</p>";
                                lbl_result_display.setText(text);
                            }
                        } else {
                            text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Can't read the bitmap image....</p>";
                            lbl_result_display.setText(text);
                        }
                    }
                } else {
                    text = lbl_result_display.getText() + "<p style='margin-left:10px;margin-top:10px;'>Can't read the bitmap image....</p>";
                    lbl_result_display.setText(text);
                }                
            }
        } else {
            text = lbl_result_display.getText() + "<html><p style='margin-left:10px;margin-top:10px;'>Please Select the CT Image....</p>";
            lbl_result_display.setText(text);
        }
    }//GEN-LAST:event_btn_uploadActionPerformed

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        Home h = new Home();
        this.dispose();
        h.setVisible(true);
    }//GEN-LAST:event_btn_cancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UploadDicomImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UploadDicomImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UploadDicomImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UploadDicomImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new UploadDicomImage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton btn_upload;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbl_dicom;
    private javax.swing.JLabel lbl_legend;
    private javax.swing.JLabel lbl_legend2;
    public static javax.swing.JLabel lbl_result_display;
    // End of variables declaration//GEN-END:variables
}
